#
# Copyright 2014, The Sporting Exchange Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

cougar.client.log.request=true
cougar.client.log.level=INFO
cougar.client.querystring.factoryBean=qsGeneratorFactory
cougar.client.exceptionTransformer.bean=exceptionTransformer

cougar.client.socket.worker.corePoolSize=30
cougar.client.socket.worker.maxPoolSize=60
cougar.client.socket.worker.timeout=0

cougar.client.socket.connector.corePoolSize=5
cougar.client.socket.connector.maxPoolSize=10
cougar.client.socket.connector.timeout=0

cougar.client.socket.applicationProtocolVersion=1
cougar.client.socket.reconnectInterval=5000
cougar.client.socket.handshakeResponseTimeout=5000
cougar.client.socket.sendBufferSize=524288
cougar.client.socket.receiveBufferSize=524288
cougar.client.socket.useDirectBuffers=false

cougar.client.socket.ssl.supportsTls=true
cougar.client.socket.ssl.requiresTls=true
cougar.client.socket.ssl.wantClientAuth=false
#
# Key store, type and password are used for the server
#   certificate and are required to terminate SSL
#
cougar.client.socket.ssl.keystore=MUST_BE_OVERRIDDEN
cougar.client.socket.ssl.keystoreType=JKS
cougar.client.socket.ssl.keystorePassword=MUST_BE_OVERRIDDEN
#
# Trust store, type and password are required if accepting client certificates
#   to validate the client cert against.
#
cougar.client.socket.ssl.truststore=MUST_BE_OVERRIDDEN
cougar.client.socket.ssl.truststoreType=JKS
cougar.client.socket.ssl.truststorePassword=MUST_BE_OVERRIDDEN

# Max depth of the write queue before we terminate the connection, a value of 0 means we never terminate the connection based on write queue depth.
cougar.client.socket.maxWriteQueueSize=0

cougar.client.socket.logLevel=SESSION

cougar.client.http.clientTimeout=30000
cougar.client.http.async.connectTimeout=30000
cougar.client.http.async.idleTimeout=30000

cougar.client.geoLocationSerializerBean=defaultGeoLocationSerializer
cougar.client.http.uuidheader=X-UUID
cougar.client.http.uuidparentsheader=X-UUID-Parents

cougar.client.http.maxConnectionsPerRoute=32
cougar.client.http.maxConnectionsTotal=128

cougar.client.http.async.maxConnectionsPerRoute=32
cougar.client.http.async.maxRequestsQueuedPerRoute=1000

cougar.client.http.hostnameVerificationDisabled=false

# async http thread pool configuration
cougar.client.http.async.worker.corePoolSize=0
cougar.client.http.async.worker.maxPoolSize=5
cougar.client.http.async.worker.timeout=60

# response processing thread pool (deserializes data read by the worker pool and calls back into the ev)
# to avoid deadlocks it needs to be the same size as or larger than the client pool
cougar.client.http.async.response.corePoolSize=0
cougar.client.http.async.response.maxPoolSize=5
cougar.client.http.async.response.timeout=60

cougar.client.http.async.hostnameVerificationDisabled=false


# socket transport thread pool configuration
cougar.client.socket.clientExecutor.corePoolSize=0
cougar.client.socket.clientExecutor.maximumPoolSize=5
cougar.client.socket.clientExecutor.keepAliveTime=60
cougar.client.socket.clientExecutor.timeUnit=SECONDS

# Number of processing threads that MINA should establish (c.f. acceptor threads in jetty)
cougar.client.socket.clientExecutor.processorThreads=1

# Number of threads to use to apply connected object updates to heaps
cougar.client.socket.connectedObjectManager.processorThreads=1

# How long each update processor thread will wait for new updates before looping back round and having a chance to check the health of the queue
cougar.client.socket.connectedObjectManager.pullerAwaitTimeout=100

# Maximum amount of time the client will wait for the message containing the initial heap state on subscription
cougar.client.socket.connectedObjectManager.maxInitialPopulationWait=5000

# Maximum amount of time the client will wait for an out of order heap update, this will only trigger if the next update is not delivered, but one after has been
cougar.client.socket.connectedObjectManager.missingDeltaTimeout=1000

# Max length allowed of the delta queue - if the queue gets too long then it suggests that updates aren't being processed quick enough
cougar.client.socket.connectedObjectManager.maxDeltaQueue=100

# Allows clients to locally conflate updates to a heap so that new listeners for the heap get given a reduced delta for initial heap traveral
# Valid values are: "none", "simple", "smart" or a fully qualified class name. Default is "none"
cougar.client.socket.connectedObjectManager.newListenerConflater=none

# Duration after which the endpoints are re-resolved and socket sessions are recycled if needed
cougar.client.socket.session.recycle.interval=1800000

# Default mode of resolving server endpoints into host addresses
# Valid values are DNS or FILE
cougar.client.socket.address.resolver=DNSBasedNetworkAddressResolver

# Location of the config file to be used for address resolution
# Is only applicable if
# cougar.client.socket.address.resolver=FILE
# By default set to /etc/cougar.hosts
cougar.client.socket.address.resolver.config.file=/etc/bf-cougar/cougar.hosts

# Whether the file resolver is enabled (controls whether it tries to load the file)
cougar.client.socket.address.resolver.file.enabled=false

# UUID Generator implementation to use. Reference to a spring bean
cougar.client.uuidgenerator=defaultClientRequestUuidGenerator

# Whether enum values passed in which don't match the expected group should hard fail (exception), or soft fail (dropped into an unknown bucket)
cougar.client.socket.enums.hardFailure=false
cougar.client.http.enums.hardFailure=false
cougar.client.http.async.enums.hardFailure=false

cougar.client.https.userTokenHandlerClass=com.betfair.cougar.client.ssl.UserAgnosticTokenHandler

# Controls RPC timeouts. A value of 0 indicates no timeout. Values are in milliseconds.
cougar.client.socket.rpc.timeout=0
# Controls the granularity of RPC timeouts (effectively how often we check for expired requests). Values are in milliseconds.
cougar.client.socket.rpc.timeout.granularity=100