<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2014, The Sporting Exchange Limited
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<bean class="uk.co.exemel.disco.util.configuration.PropertyConfigurer">
        <constructor-arg index="0" ref="disco.core.EncryptorRegistry"/>
		<property name="defaultConfig" value="classpath:conf/disco-core-defaults.properties"/>
		<property name="configOverride" value="overrides.properties"/>
		<property name="placeholderPrefix" value="$COUGAR{"/>
	</bean>

    <bean name="commandProcessorExecutor" class="uk.co.exemel.disco.util.JMXReportingThreadPoolExecutor">
        <constructor-arg index="0" value="$COUGAR{disco.commandProcessor.corePoolSize}"/>
        <constructor-arg index="1" value="$COUGAR{disco.commandProcessor.maximumPoolSize}"/>
        <constructor-arg index="2" value="$COUGAR{disco.commandProcessor.keepAliveTime}"/>
        <constructor-arg index="3" value="$COUGAR{disco.commandProcessor.timeUnit}"/>
        <constructor-arg index="4">
            <bean class="java.util.concurrent.LinkedBlockingQueue"/>
        </constructor-arg>
        <constructor-arg>
            <bean class="org.springframework.scheduling.concurrent.CustomizableThreadFactory">
                <property name="threadNamePrefix" value="ExecutionVenue-"/>
            </bean>
        </constructor-arg>
    </bean>

    <!-- make sure disco.app.name is specified and valid -->
    <bean class="uk.co.exemel.disco.core.impl.AppNameValidation" lazy-init="false">
        <constructor-arg value="$COUGAR{disco.app.name}"/>
    </bean>


    <bean id="identityResolverFactory" class="uk.co.exemel.disco.core.api.security.IdentityResolverFactory"/>

    <bean id="abstractIdentityResolver" class="uk.co.exemel.disco.core.impl.security.IdentityResolverFactoryHelper"
          abstract="true" init-method="init">
        <property name="identityResolverFactory" ref="identityResolverFactory"/>
    </bean>



    <bean id="transportRegistry" class="uk.co.exemel.disco.core.impl.transports.TransportRegistryImpl"/>

    <!--If you want to extend disco by adding additional preproc interceptors, add 'em to this list -->
    <util:list id="preProcessorInterceptors">
        <bean class="uk.co.exemel.disco.core.impl.ev.MandatoryCheckInterceptor">
            <constructor-arg ref="disco.core.ExecutionVenue"/>
        </bean>
    </util:list>

    <util:list id="postProcessorInterceptors"/>

    <bean id="preProcessorInterceptorRegistrationHelper" abstract="true" init-method="register"
            class="uk.co.exemel.disco.core.api.ev.ClientPreProcessorRegistrationHelper">
        <property name="referenceInterceptorList" ref="preProcessorInterceptors"/>
    </bean>

    <bean id="postProcessorInterceptorRegistrationHelper" abstract="true" init-method="register"
            class="uk.co.exemel.disco.core.api.ev.ClientPostProcessorRegistrationHelper">
        <property name="referenceInterceptorList" ref="postProcessorInterceptors"/>
    </bean>

	<bean id="applicationProperties" class="uk.co.exemel.disco.core.impl.jmx.ApplicationProperties" />

	<bean id="mbeanServer" class="org.springframework.jmx.support.MBeanServerFactoryBean">
        	<property name="locateExistingServerIfPossible" value="true"/>
    	</bean>

	<bean class="org.springframework.jmx.export.MBeanExporter">
		<property name="server" ref="mbeanServer" />

		<property name="registrationBehavior">
			<bean
				id="org.springframework.jmx.export.MBeanExporter.REGISTRATION_REPLACE_EXISTING"
				class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />
		</property>

        <property name="assembler">
			<bean id="assembler" class="org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler">
				<property name="attributeSource">
					<bean id="jmxAttributeSource" class="org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource"/>
				</property>
			</bean>
		</property>

		<property name="beans">
			<map>
				<entry key="CoUGAR:name=ApplicationProperties" value-ref="applicationProperties" />
				<entry key="CoUGAR:name=LibraryVersions" value-ref="libraryVersions" />
				<entry key="CoUGAR:name=ApplicationChecksums" value-ref="applicationChecksums" />
			</map>
		</property>
	</bean>

    <bean name="libraryVersions" class="uk.co.exemel.disco.util.jmx.LibraryVersions"/>
    <bean name="applicationChecksums" class="uk.co.exemel.disco.util.jmx.ApplicationChecksums">
        <property name="algorithms" value="$COUGAR{disco.applicationChecksums.algorithms}"/>
    </bean>

    <bean id="eventLogRecordSetup" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod"
                  value="uk.co.exemel.disco.logging.records.EventLogRecord.setCollectionSeperator"/>

        <property name="arguments">
            <list>
                <bean class="java.lang.String">
                    <constructor-arg value="$COUGAR{disco.eventLogRecord.collectionSeperator}"/>
                </bean>
            </list>
        </property>
    </bean>

    <bean name="addressClassifier" class="uk.co.exemel.disco.core.impl.AddressClassifier">
        <property name="privateAddressRanges" value="$COUGAR{disco.network.ipv4.privateAddressRanges}"/>
        <property name="localLoopbackRanges" value="$COUGAR{disco.network.ipv4.localLoopbackRanges}"/>
    </bean>

    <bean name="compoundTracer" class="uk.co.exemel.disco.core.impl.tracing.CompoundTracer">
    </bean>

    <bean name="compoundTracerRegistrationHelper" class="uk.co.exemel.disco.core.impl.tracing.CompoundTracerRegistrationHelper" abstract="true" init-method="init" lazy-init="false">
        <constructor-arg index="0" ref="compoundTracer"/>
    </bean>

    <bean name="loggingTracerInitialisation" parent="compoundTracerRegistrationHelper">
        <constructor-arg index="1">
            <bean class="uk.co.exemel.disco.core.impl.tracing.LoggingTracer"/>
        </constructor-arg>
        <constructor-arg index="2" value="$COUGAR{disco.trace.enableLoggingTracer}"/>
    </bean>

    <bean name="optionalGateRegisterer" class="uk.co.exemel.disco.core.impl.OptionalGateRegisterer"
          abstract="true">
        <constructor-arg index="0" value="disco.core.StartingGate"/>
    </bean>

    <!-- Now set up the core set of loggers, server, trace and console -->
    <import resource="classpath:conf/remote/logging-handlers.xml"/>
	<alias name="identityResolverRegistry"           alias="disco.core.IdentityResolverRegistry"/>

    <alias name="postProcessorInterceptorRegistrationHelper" alias="disco.core.PostProcessorInterceptorRegistrationHelper"/>
    <alias name="preProcessorInterceptorRegistrationHelper"  alias="disco.core.PreProcessorInterceptorRegistrationHelper"/>
    <alias name="transportRegistry" alias="disco.core.TransportRegistry"/>

    <alias name="abstractIdentityResolver" alias="disco.core.AbstractIdentityResolver"/>
    <alias name="identityResolverFactory" alias="disco.core.IdentityResolverFactory"/>
    <alias name="commandProcessorExecutor" alias="disco.core.CommandProcessorExecutor"/>
    <alias name="applicationChecksums" alias="disco.core.ApplicationChecksums"/>
    <alias name="addressClassifier" alias="disco.core.AddressClassifier"/>

    <alias name="compoundTracer" alias="disco.core.Tracer"/>
    <alias name="compoundTracerRegistrationHelper" alias="disco.core.TracerRegistrationHelper"/>
    <alias name="optionalGateRegisterer" alias="disco.core.OptionalGateRegisterer"/>
</beans>
