<!--
  ~ Copyright 2014, The Sporting Exchange Limited
  ~ Copyright 2015, Simon MatiÄ‡ Langford
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean class="uk.co.exemel.disco.util.configuration.PropertyConfigurer">
        <constructor-arg index="0" ref="disco.core.EncryptorRegistry"/>
        <property name="defaultConfig" value="classpath:conf/disco-client-defaults.properties"/>
        <property name="configOverride" value="overrides.properties"/>
        <property name="placeholderPrefix" value="$COUGAR_CLIENT{"/>
    </bean>

    <bean id="defaultGeoLocationSerializer" class="uk.co.exemel.disco.client.DefaultGeoLocationSerializer"/>

    <!-- Initialise the RequestUUID Generator -->
    <bean id="requestUuidInitialisation" class="uk.co.exemel.disco.util.RequestUUIDImpl">
        <constructor-arg index="0" ref="$COUGAR_CLIENT{disco.client.uuidgenerator}"/>
    </bean>

    <bean id="defaultClientRequestUuidGenerator" class="uk.co.exemel.disco.util.UUIDGeneratorImpl"/>

    <bean id="qsGeneratorFactory" class="uk.co.exemel.disco.client.query.QueryStringGeneratorFactory"
          init-method="init">
        <property name="dataBindingFactory" ref="disco.marshalling.JSONBindingFactory"/>
    </bean>

    <bean id="exceptionTransformer" class="uk.co.exemel.disco.client.exception.ExceptionTransformerDelegate"
          init-method="init">
        <property name="dataBindingFactory" ref="disco.marshalling.JSONBindingFactory"/>
    </bean>

    <bean id="defaultRetryHandler" class="org.apache.http.impl.client.DefaultHttpRequestRetryHandler">
        <constructor-arg value="3"/>
        <constructor-arg value="false"/>
    </bean>

    <bean id="defaultHttpContextEmitter" class="uk.co.exemel.disco.client.HttpContextEmitter">
        <constructor-arg index="0" ref="$COUGAR_CLIENT{disco.client.geoLocationSerializerBean}"/>
        <constructor-arg index="1" value="$COUGAR_CLIENT{disco.client.http.uuidheader}"/>
        <constructor-arg index="2" value="$COUGAR_CLIENT{disco.client.http.uuidparentsheader}"/>
    </bean>

    <bean id="defaultHttpContextEmission" class="uk.co.exemel.disco.client.api.CompoundContextEmitter">
        <constructor-arg index="0">
            <list>
                <ref bean="defaultHttpContextEmitter"/>
            </list>
        </constructor-arg>
    </bean>

    <bean id="defaultHttpContextEmitterRegisterer" class="uk.co.exemel.disco.client.api.ContextEmitterRegisterer"
          abstract="true">
        <constructor-arg index="0" ref="defaultHttpContextEmission"/>
    </bean>

    <!-- synchronous http transport -->
    <bean id="abstractRescriptTransport" class="uk.co.exemel.disco.client.HttpClientExecutable" abstract="true"
          init-method="init">
        <constructor-arg index="1" ref="defaultHttpContextEmission"/>
        <constructor-arg index="2" ref="disco.core.Tracer"/>

        <property name="retryHandler" ref="defaultRetryHandler"/>
        <property name="dataBindingFactory" ref="disco.marshalling.JSONBindingFactory"/>
        <property name="queryStringGeneratorFactory" ref="$COUGAR_CLIENT{disco.client.querystring.factoryBean}"/>
        <property name="exceptionTransformer" ref="exceptionTransformer"/>
        <property name="connectTimeout" value="$COUGAR_CLIENT{disco.client.http.clientTimeout}"/>
        <property name="maxTotalConnections" value="$COUGAR_CLIENT{disco.client.http.maxConnectionsTotal}"/>
        <property name="maxPerRouteConnections" value="$COUGAR_CLIENT{disco.client.http.maxConnectionsPerRoute}"/>
        <property name="hostnameVerificationDisabled" value="$COUGAR_CLIENT{disco.client.http.hostnameVerificationDisabled}" />
        <property name="jmxControl" ref="clientJMXControl"/>
        <property name="hardFailEnumDeserialisation" value="$COUGAR_CLIENT{disco.client.http.enums.hardFailure}"/>
        <property name="userTokenHandler">
            <bean class="$COUGAR_CLIENT{disco.client.https.userTokenHandlerClass}" />
        </property>
    </bean>

    <!-- asynchronous http transport -->
    <bean id="asyncHttpWorkerThreadPool" class="uk.co.exemel.disco.util.JMXReportingThreadPoolExecutor">
        <constructor-arg value="$COUGAR_CLIENT{disco.client.http.async.worker.corePoolSize}"/>
        <constructor-arg value="$COUGAR_CLIENT{disco.client.http.async.worker.maxPoolSize}"/>
        <constructor-arg value="$COUGAR_CLIENT{disco.client.http.async.worker.timeout}"/>
        <constructor-arg value="SECONDS"/>
        <constructor-arg>
            <bean class="java.util.concurrent.SynchronousQueue"/>
        </constructor-arg>
        <constructor-arg>
            <bean class="org.springframework.scheduling.concurrent.CustomizableThreadFactory">
                <property name="threadNamePrefix" value="Client-AsyncHttpWorker-"/>
            </bean>
        </constructor-arg>
    </bean>

    <!-- asynchronous http transport -->
    <bean id="asyncHttpResponseProcessorThreadPool" class="uk.co.exemel.disco.util.JMXReportingThreadPoolExecutor">
        <constructor-arg value="$COUGAR_CLIENT{disco.client.http.async.response.corePoolSize}"/>
        <constructor-arg value="$COUGAR_CLIENT{disco.client.http.async.response.maxPoolSize}"/>
        <constructor-arg value="$COUGAR_CLIENT{disco.client.http.async.response.timeout}"/>
        <constructor-arg value="SECONDS"/>
        <constructor-arg>
            <bean class="java.util.concurrent.SynchronousQueue"/>
        </constructor-arg>
        <constructor-arg>
            <bean class="org.springframework.scheduling.concurrent.CustomizableThreadFactory">
                <property name="threadNamePrefix" value="Client-AsyncHttpResponseProcessor-"/>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="abstractAsyncRescriptTransport" class="uk.co.exemel.disco.client.AsyncHttpExecutable" abstract="true"
          init-method="init">
        <constructor-arg index="1" ref="defaultHttpContextEmission"/>
        <constructor-arg index="2" ref="disco.core.Tracer"/>
        <constructor-arg index="3" ref="asyncHttpWorkerThreadPool"/>
        <constructor-arg index="4" ref="asyncHttpResponseProcessorThreadPool"/>

        <property name="dataBindingFactory" ref="disco.marshalling.JSONBindingFactory"/>
        <property name="queryStringGeneratorFactory" ref="qsGeneratorFactory"/>
        <property name="exceptionTransformer" ref="exceptionTransformer"/>
        <property name="connectTimeout" value="$COUGAR_CLIENT{disco.client.http.async.connectTimeout}"/>
        <property name="idleTimeout" value="$COUGAR_CLIENT{disco.client.http.async.idleTimeout}"/>

        <property name="maxRequestsQueuedPerDestination" value="$COUGAR_CLIENT{disco.client.http.async.maxRequestsQueuedPerRoute}"/>
        <property name="maxConnectionsPerDestination" value="$COUGAR_CLIENT{disco.client.http.async.maxConnectionsPerRoute}"/>
        <property name="hostnameVerificationDisabled" value="$COUGAR_CLIENT{disco.client.http.async.hostnameVerificationDisabled}" />
        <property name="jmxControl" ref="clientJMXControl"/>
        <property name="hardFailEnumDeserialisation" value="$COUGAR_CLIENT{disco.client.http.async.enums.hardFailure}"/>
    </bean>

    <!-- synchronous http transport factory -->
    <bean id="syncHttpTransportFactory" class="uk.co.exemel.disco.client.SyncHttpTransportFactory">
        <property name="retryHandler" ref="defaultRetryHandler"/>
        <property name="dataBindingFactory" ref="disco.marshalling.JSONBindingFactory"/>
        <property name="queryStringGeneratorFactory" ref="qsGeneratorFactory"/>
        <property name="exceptionTransformer" ref="exceptionTransformer"/>
        <property name="httpTimeout" value="$COUGAR_CLIENT{disco.client.http.clientTimeout}"/>
        <property name="maxTotalConnections" value="$COUGAR_CLIENT{disco.client.http.maxConnectionsTotal}"/>
        <property name="maxPerRouteConnections" value="$COUGAR_CLIENT{disco.client.http.maxConnectionsPerRoute}"/>
        <property name="hardFailEnumDeserialisation" value="$COUGAR_CLIENT{disco.client.http.enums.hardFailure}"/>
        <property name="contextEmitter" ref="disco.client.DefaultHttpContextEmission"/>
        <property name="tracer" ref="disco.core.Tracer"/>
    </bean>

    <!-- binary transport -->
    <bean id="clientSocketMarshaller" class="uk.co.exemel.disco.netutil.nio.marshalling.SocketRMIMarshaller">
        <property name="hardFailEnumDeserialisation" value="$COUGAR_CLIENT{disco.client.socket.enums.hardFailure}"/>
    </bean>

    <bean id="workerThreadPool" class="uk.co.exemel.disco.util.JMXReportingThreadPoolExecutor">
        <constructor-arg value="$COUGAR_CLIENT{disco.client.socket.worker.corePoolSize}"/>
        <constructor-arg value="$COUGAR_CLIENT{disco.client.socket.worker.maxPoolSize}"/>
        <constructor-arg value="$COUGAR_CLIENT{disco.client.socket.worker.timeout}"/>
        <constructor-arg value="SECONDS"/>
        <constructor-arg>
            <bean class="java.util.concurrent.LinkedBlockingQueue"/>
        </constructor-arg>
        <constructor-arg>
            <bean class="org.springframework.scheduling.concurrent.CustomizableThreadFactory">
                <property name="threadNamePrefix" value="Client-SocketWorker-"/>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="reconnectThreadPool" class="uk.co.exemel.disco.util.JMXReportingThreadPoolExecutor">
        <constructor-arg value="$COUGAR_CLIENT{disco.client.socket.connector.corePoolSize}"/>
        <constructor-arg value="$COUGAR_CLIENT{disco.client.socket.connector.maxPoolSize}"/>
        <constructor-arg value="$COUGAR_CLIENT{disco.client.socket.connector.timeout}"/>
        <constructor-arg value="SECONDS"/>
        <constructor-arg>
            <bean class="java.util.concurrent.LinkedBlockingQueue"/>
        </constructor-arg>
        <constructor-arg>
            <bean class="org.springframework.scheduling.concurrent.CustomizableThreadFactory">
                <property name="threadNamePrefix" value="Client-SocketReconnector-"/>
            </bean>
        </constructor-arg>
    </bean>

    <bean name="clientConnectedObjectManager" class="uk.co.exemel.disco.client.socket.ClientConnectedObjectManager"
          init-method="start" destroy-method="stop">
        <property name="nioLogger" ref="clientNioLogger"/>
        <property name="objectIOFactory" ref="objectIOFactory"/>
        <property name="numProcessingThreads"
                  value="$COUGAR_CLIENT{disco.client.socket.connectedObjectManager.processorThreads}"/>
        <property name="maxInitialPopulationWait"
                  value="$COUGAR_CLIENT{disco.client.socket.connectedObjectManager.maxInitialPopulationWait}"/>
        <property name="maxDeltaQueue"
                  value="$COUGAR_CLIENT{disco.client.socket.connectedObjectManager.maxDeltaQueue}"/>
        <property name="missingDeltaTimeout"
                  value="$COUGAR_CLIENT{disco.client.socket.connectedObjectManager.missingDeltaTimeout}"/>
        <property name="pullerAwaitTimeout"
                  value="$COUGAR_CLIENT{disco.client.socket.connectedObjectManager.pullerAwaitTimeout}"/>
        <property name="newListenerConflater">
            <bean factory-bean="newListenerConflaterFactory" factory-method="getConflater"/>
        </property>
    </bean>

    <bean name="newListenerConflaterFactory" class="uk.co.exemel.disco.client.socket.ConflaterFactory">
        <constructor-arg index="0"
                         value="$COUGAR_CLIENT{disco.client.socket.connectedObjectManager.newListenerConflater}"/>
    </bean>

    <bean id="DNSBasedNetworkAddressResolver"
          class="uk.co.exemel.disco.client.socket.resolver.DNSBasedAddressResolver"/>

    <bean id="FILEBasedNetworkAddressResolver"
          class="uk.co.exemel.disco.client.socket.resolver.FileBasedAddressResolver">
        <constructor-arg index="0" value="$COUGAR_CLIENT{disco.client.socket.address.resolver.file.enabled}"/>
        <constructor-arg index="1" value="$COUGAR_CLIENT{disco.client.socket.address.resolver.config.file}"/>
    </bean>

    <bean id="networkAddressResolver" class="uk.co.exemel.disco.client.socket.resolver.HotSwitchableAddressResolver">
        <constructor-arg index="0" value="$COUGAR_CLIENT{disco.client.socket.address.resolver}"/>
    </bean>

    <bean id="defaultSocketContextEmission" class="uk.co.exemel.disco.client.api.CompoundContextEmitter">
        <constructor-arg index="0">
            <list>
            </list>
        </constructor-arg>
    </bean>

    <bean id="defaultSocketContextEmitterRegisterer" class="uk.co.exemel.disco.client.api.ContextEmitterRegisterer"
          abstract="true">
        <constructor-arg index="0" ref="defaultSocketContextEmission"/>
    </bean>

    <bean id="abstractSocketTransport" class="uk.co.exemel.disco.client.socket.ExecutionVenueNioClient" abstract="true"
          init-method="start" destroy-method="stop">
        <constructor-arg index="0" ref="clientNioLogger"/>
        <constructor-arg index="1" ref="clientNioConfig"/>
        <constructor-arg index="2" ref="objectIOFactory"/>
        <constructor-arg index="3" ref="clientConnectedObjectManager"/>
        <constructor-arg index="4" ref="clientSocketTransportInfo"/>
        <constructor-arg index="6" ref="workerThreadPool"/>
        <constructor-arg index="7" ref="reconnectThreadPool"/>
        <constructor-arg index="8" value="$COUGAR_CLIENT{disco.client.socket.reconnectInterval}"/>
        <constructor-arg index="9" value="$COUGAR_CLIENT{disco.client.socket.handshakeResponseTimeout}"/>
        <constructor-arg index="10" value="$COUGAR_CLIENT{disco.client.socket.session.recycle.interval}"/>
        <constructor-arg index="11" ref="networkAddressResolver"/>
        <constructor-arg index="12" ref="disco.core.Tracer"/>
        <property name="marshaller" ref="clientSocketMarshaller"/>
        <property name="contextEmitter" ref="defaultSocketContextEmission"/>
    </bean>

    <bean id="objectIOFactory" class="uk.co.exemel.disco.netutil.nio.hessian.HessianObjectIOFactory">
        <constructor-arg index="0" value="true"/>
    </bean>

    <bean id="clientNioConfig" class="uk.co.exemel.disco.netutil.nio.TlsNioConfig">
        <property name="workerTimeout" value="$COUGAR_CLIENT{disco.client.socket.worker.timeout}"/>
        <property name="maxWriteQueueSize" value="$COUGAR_CLIENT{disco.client.socket.maxWriteQueueSize}"/>
        <property name="recvBufferSize" value="$COUGAR_CLIENT{disco.client.socket.receiveBufferSize}"/>
        <property name="sendBufferSize" value="$COUGAR_CLIENT{disco.client.socket.sendBufferSize}"/>
        <property name="useDirectBuffersInMina" value="$COUGAR_CLIENT{disco.client.socket.useDirectBuffers}"/>
        <property name="nioLogger" ref="clientNioLogger"/>
        <property name="supportsTls" value="$COUGAR_CLIENT{disco.client.socket.ssl.supportsTls}"/>
        <property name="requiresTls" value="$COUGAR_CLIENT{disco.client.socket.ssl.requiresTls}"/>
        <property name="wantClientAuth" value="$COUGAR_CLIENT{disco.client.socket.ssl.wantClientAuth}"/>
        <property name="keystore" value="$COUGAR_CLIENT{disco.client.socket.ssl.keystore}"/>
        <property name="keystoreType" value="$COUGAR_CLIENT{disco.client.socket.ssl.keystoreType}"/>
        <property name="keystorePassword" value="$COUGAR_CLIENT{disco.client.socket.ssl.keystorePassword}"/>
        <property name="truststore" value="$COUGAR_CLIENT{disco.client.socket.ssl.truststore}"/>
        <property name="truststoreType" value="$COUGAR_CLIENT{disco.client.socket.ssl.truststoreType}"/>
        <property name="truststorePassword" value="$COUGAR_CLIENT{disco.client.socket.ssl.truststorePassword}"/>
        <property name="rpcTimeoutMillis" value="$COUGAR_CLIENT{disco.client.socket.rpc.timeout}"/>
        <property name="rpcTimeoutGranularityMillis" value="$COUGAR_CLIENT{disco.client.socket.rpc.timeout.granularity}"/>
        <property name="mbeanServer">
            <bean class="org.springframework.jmx.support.MBeanServerFactoryBean">
                <property name="locateExistingServerIfPossible" value="true"/>
            </bean>
        </property>
    </bean>


    <bean id="clientNioLogger" class="uk.co.exemel.disco.netutil.nio.NioLogger">
        <constructor-arg value="$COUGAR_CLIENT{disco.client.socket.logLevel}"/>
    </bean>

    <bean id="clientSocketTransportInfo" class="uk.co.exemel.disco.client.socket.jmx.ClientSocketTransportInfo">
        <constructor-arg index="0" value="disco.core.JmxHtmlAdapter"/>
        <constructor-arg index="1" ref="clientConnectedObjectManager"/>
    </bean>

    <bean id="abstractClient" abstract="true">
        <constructor-arg index="0" ref="disco.core.ExecutionVenue"/>
        <constructor-arg index="1" ref="disco.core.CommandProcessorExecutor"/>
    </bean>

    <bean id="abstractSyncClient" abstract="true">
        <constructor-arg index="0" ref="disco.core.ExecutionVenue"/>
    </bean>

    <alias name="abstractSocketTransport" alias="disco.client.AbstractSocketTransport"/>
    <alias name="abstractRescriptTransport" alias="disco.client.AbstractRescriptTransport"/>
    <alias name="abstractAsyncRescriptTransport" alias="disco.client.AbstractAsyncRescriptTransport"/>
    <alias name="abstractClient" alias="disco.client.AbstractClient"/>
    <alias name="abstractSyncClient" alias="disco.client.AbstractSyncClient"/>
    <alias name="defaultHttpContextEmission" alias="disco.client.DefaultHttpContextEmission"/>
    <alias name="defaultHttpContextEmitterRegisterer" alias="disco.client.DefaultHttpContextEmissionRegisterer"/>
    <alias name="defaultSocketContextEmission" alias="disco.client.DefaultSocketContextEmission"/>
    <alias name="defaultSocketContextEmitterRegisterer" alias="disco.client.DefaultSocketContextEmissionRegisterer"/>

    <bean name="clientMbeanExporter" class="org.springframework.jmx.export.MBeanExporter">
        <property name="beans">
            <map>
                <entry key="CoUGAR.socket.transport.client:name=asyncHttpWorkerExecutor"
                       value-ref="asyncHttpWorkerThreadPool"/>
                <entry key="CoUGAR.socket.transport.client:name=asyncHttpResponseProcessorThreadPool"
                       value-ref="asyncHttpResponseProcessorThreadPool"/>

                <entry key="CoUGAR.socket.transport.client:name=socketWorkerExecutor" value-ref="workerThreadPool"/>
                <entry key="CoUGAR.socket.transport.client:name=socketConnectorExecutor"
                       value-ref="reconnectThreadPool"/>
                <entry key="CoUGAR.socket.transport.client:name=socketConfig" value-ref="clientNioConfig"/>
                <entry key="CoUGAR.socket.transport.client:name=nioLogger" value-ref="clientNioLogger"/>
                <entry key="CoUGAR.socket.transport.client:type=addressResolver,name=hybrid"
                       value-ref="networkAddressResolver"/>
                <entry key="CoUGAR.socket.transport.client:type=addressResolver,name=file"
                       value-ref="FILEBasedNetworkAddressResolver"/>
                <entry key="CoUGAR.socket.transport.client:type=addressResolver,name=dns"
                       value-ref="DNSBasedNetworkAddressResolver"/>
            </map>
        </property>
        <property name="registrationBehaviorName" value="REGISTRATION_REPLACE_EXISTING"/>
        <property name="server">
            <bean class="org.springframework.jmx.support.MBeanServerFactoryBean">
                <property name="locateExistingServerIfPossible" value="true"/>
            </bean>
        </property>
        <property name="assembler">
            <bean id="assembler"
                  class="org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler">
                <property name="attributeSource">
                    <bean id="jmxAttributeSource"
                          class="org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource"/>
                </property>
            </bean>
        </property>
    </bean>

    <bean id="clientJMXControl" class="uk.co.exemel.disco.util.jmx.JMXControl">
        <constructor-arg ref="clientMbeanExporter"/>
    </bean>

    <bean id="discoClientFactory" class="uk.co.exemel.disco.client.factory.AbstractDiscoClientFactory" abstract="true">
        <property name="syncHttpTransportFactory" ref="syncHttpTransportFactory"/>
        <property name="discoIntroductionService" ref="discoIntroductionService"/>
        <property name="executionVenue" ref="disco.core.ExecutionVenue"/>
        <property name="executor" ref="disco.core.CommandProcessorExecutor"/>
    </bean>
</beans>
