#
# Copyright 2014, The Sporting Exchange Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

disco.socket.serverport=9003
disco.socket.bindaddress=0.0.0.0
disco.socket.reuseAddress=true
disco.socket.logLevel=SESSION
disco.socket.sendBufferSize=524288
disco.socket.receiveBufferSize=524288
disco.socket.useDirectBuffers=false
disco.socket.ssl.supportsTls=true
disco.socket.ssl.requiresTls=true
disco.socket.ssl.needClientAuth=false
disco.socket.ssl.wantClientAuth=$COUGAR-SOCKET-TRANSPORT{disco.socket.ssl.needClientAuth}
#
# Key store, type and password are used for the server
#   certificate and are required to terminate SSL
#
disco.socket.ssl.keystore=MUST_BE_OVERRIDDEN
disco.socket.ssl.keystoreType=JKS
disco.socket.ssl.keystorePassword=MUST_BE_OVERRIDDEN
#
# Trust store, type and password are required if accepting client certificates
#   to validate the client cert against.
#
disco.socket.ssl.truststore=MUST_BE_OVERRIDDEN
disco.socket.ssl.truststoreType=JKS
disco.socket.ssl.truststorePassword=MUST_BE_OVERRIDDEN

# The default key length to assume for an unknown cipher suite
# A value of 0 indicates an insecure transport
disco.socket.ssl.unknownCipherKeyLength=0

disco.socket.log.SESSION-LOG.append=true
disco.socket.log.SESSION-LOG.rotation=HOUR
disco.socket.log.SESSION-LOG.flush=true
disco.socket.log.SESSION-LOG.format=%d{HH:mm:ss.SSS}: %m%n

disco.socket.log.PUSH_SUBSCRIPTION-LOG.append=true
disco.socket.log.PUSH_SUBSCRIPTION-LOG.rotation=HOUR
disco.socket.log.PUSH_SUBSCRIPTION-LOG.flush=true
disco.socket.log.PUSH_SUBSCRIPTION-LOG.format=%m%n
disco.socket.log.PUSH_SUBSCRIPTION-LOG.immediateFlush=true

#number of consecutive times the same health message must be received before it is acted on by the protocol
#applies only if using active monitoring
disco.socket.healthStateRepeatsBeforeUpdate=3

#frequency in millisecond to monitor the health of the container application.  if 0 then passively monitors.
#if using active monitoring then monitoringStrategy should be 'active' otherwise should be 'passive'
disco.socket.healthMonitorInterval=2000

#only important if using passive monitoring
disco.socket.healthStateDebouncePeriod=10000

#active or passive strategy
disco.socket.healthMonitorStrategy=active

# socket transport thread pool configuration
disco.socket.serverExecutor.corePoolSize=0
disco.socket.serverExecutor.maximumPoolSize=5
disco.socket.serverExecutor.keepAliveTime=60
disco.socket.serverExecutor.timeUnit=SECONDS

# Number of processing threads that MINA should establish (c.f. acceptor threads in jetty)
disco.socket.serverExecutor.processorThreads=1

# Maximum number of update actions to include in a single network message (except where the max number would prevent
# any updates being included, in which case a single update, regardless of the number of actions it contains, will be included)
disco.socket.push.maxUpdateActionsPerMessage=1000

# Max depth of the write queue before we terminate the connection, a value of 0 means we never terminate the connection based on write queue depth.
disco.socket.maxWriteQueueSize=0

# Number of threads to use for push delta emission
disco.socket.push.processingThreads=1

# Max time to wait for outstanding requests to complete before closing the session
disco.socket.maxTimeToWaitForRequestCompletion=15000

# Bean used to extract the common name from any client cert presented on SSL connections
disco.socket.tokenResolver.certInfoExtractor=defaultSocketCertInfoExtractor

# Whether enum values passed in which don't match the expected group should hard fail (exception), or soft fail (dropped into an unknown bucket)
disco.socket.enums.hardFailure=true

# Whether the client time is synchronised with the server. We currently assume that all clients are equal.
disco.socket.timeResolver.clientSynchronized=true
